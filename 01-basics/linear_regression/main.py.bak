1 import torch
2 import torch.nn as nn
3 import numpy as np
4 import matplotlib.pyplot as plt
5 from torch.autograd import Variable
6
7
8 # Hyper Parameters
9 input_size = 1
 10 output_size = 1
 11 num_epochs = 600
 12 learning_rate = 0.001
 13
 14 # Toy Dataset
 15 x_train = np.array([[3.3], [4.4], [5.5], [6.71], [6.93], [4.168],
 16                  [9.779], [6.182], [7.59], [2.167], [7.042],
 17                  [10.791], [5.313], [7.997], [3.1]], dtype=np.float32)
 18
 19 y_train = np.array([[1.7], [2.76], [2.09], [3.19], [1.694], [1.573],
 20                  [3.366], [2.596], [2.53], [1.221], [2.827],
 21                  [3.465], [1.65], [2.904], [1.3]], dtype=np.float32)
 22
 23 # Linear Regression Model
 24 class LinearRegression(nn.Module):
 25    def __init__(self, input_size, output_size):
 26        super(LinearRegression, self).__init__()
 27        self.linear = nn.Linear(input_size, output_size)
 28
 29    def forward(self, x):
 30        out = self.linear(x)
 31        return out
 32
 33 model = LinearRegression(input_size, output_size)
 34
 35 # Loss and Optimizer
 36 criterion = nn.MSELoss()
 37 optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)
 38
 39 # Train the Model
40 for epoch in range(num_epochs):
41    # Convert numpy array to torch Variable
42    inputs = Variable(torch.from_numpy(x_train))
43    targets = Variable(torch.from_numpy(y_train))
44
45    # Forward + Backward + Optimize
46    optimizer.zero_grad()
47    outputs = model(inputs)
48    loss = criterion(outputs, targets)
49    loss.backward()
50    optimizer.step()
51
52    if (epoch+1) % 5 == 0:
53        print ('Epoch [%d/%d], Loss: %.4f'
54              %(epoch+1, num_epochs, loss.data[0]))
55
56 # Plot the graph
57 predicted = model(Variable(torch.from_numpy(x_train))).data.numpy()
58 plt.plot(x_train, y_train, 'ro', label='Original data')
59 plt.plot(x_train, predicted, label='Fitted line')
60 plt.legend()
61 plt.show()
62
63 print(model.state_dict())
64
65 # Save the Model
66 torch.save(model.state_dict(), 'model.pkl')